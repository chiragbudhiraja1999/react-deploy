{"version":3,"sources":["logo.svg","SignIn.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SignIn","React","useState","email","setemail","password","setpassword","align","type","placeholder","value","onChange","event","target","variant","onClick","App","className","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,6IC8B5B,SAASC,IAAS,MAIJC,IAAMC,SAAS,IAJX,mBAItBC,EAJsB,KAIhBC,EAJgB,OAKEH,IAAMC,SAAS,IALjB,mBAKtBG,EALsB,KAKbC,EALa,KA2B/B,OACE,6BACI,sCAIA,yBAAKC,MAAM,UAAX,QAEI,2BAAOC,KAAK,QAAQC,YAAY,cAAcC,MAAOP,EAAOQ,SA5B9C,SAACC,GACnBR,EAAUQ,EAAMC,OAAOH,WA8BvB,yBAAKH,MAAM,UAAX,WAEI,2BAAOC,KAAK,WAAWC,YAAY,iBAAiBC,MAAOL,EAAUM,SA7BpD,SAACC,GACtBN,EAAaM,EAAMC,OAAOH,WA+B1B,yBAAKH,MAAM,UACP,4BAAQO,QAAQ,YAAYC,QArBf,cAqBb,YCxDGC,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACA,kBAAE,IAAF,CAAOC,GAAG,UAAV,kBACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWrB,OCC1BsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3ab74825.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useCallback} from 'react';\n// import { useSelector, useDispatch } from \"react-redux\";\n// import Button from '@material-ui/core/Button';\n// import Typography from '@material-ui/core/Typography';\n// import { makeStyles } from '@material-ui/core/styles';\n// import * as Actions from '../store/actions/login.action';\n// import withReducer from \"app/store/withReducer\";\n\n\n\n// const useStyles = makeStyles((theme) => ({\n//   paper: {\n//     marginTop: theme.spacing(8),\n//     display: 'flex',\n//     flexDirection: 'column',\n//     alignItems: 'center',\n//   },\n//   avatar: {\n//     margin: theme.spacing(1),\n//     backgroundColor: theme.palette.secondary.main,\n//   },\n//   form: {\n//     width: '100%', // Fix IE 11 issue.\n//     marginTop: theme.spacing(1),\n//   },\n//   submit: {\n//     margin: theme.spacing(3, 0, 2),\n//   },\n// }));\n\nexport default function SignIn() {\n\n    // const classes = useStyles();\n    // const dispatch = useDispatch();\n    const [email,setemail] = React.useState(\"\");\n    const [password,setpassword] = React.useState(\"\");\n\n    const onChangeEmail = (event) => {\n        setemail( event.target.value)\n    };\n\n    const onChangePassword = (event) => {\n        setpassword( event.target.value)\n    };\n\n    // const onClickaddCode = useCallback((email,password) => {\n    //   dispatch(\n    //     Actions.loginAction(email,password)\n    //   );\n    // // console.log('code45',actionDispatch)\n    \n    // });\n\n    const handleSubmit = () => {\n        // s\n        }\n\n  return (\n    <div>\n        <div>\n            LOGIN\n        </div>\n\n        <div align='center'>\n           Email\n            <input type='email' placeholder='Enter Email' value={email} onChange={onChangeEmail} />\n        </div>\n\n        <div align='center'>\n            Password\n            <input type='password' placeholder='Enter Password' value={password} onChange={onChangePassword} />\n        </div>\n\n        <div align='center'>\n            <button variant='contained' onClick={handleSubmit}>Submit</button>\n        </div>\n    </div>\n  );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport { BrowserRouter, Switch, Route, NavLink,Link} from 'react-router-dom';\nimport './App.css';\nimport SignIn from './SignIn'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      < Link to=\"/login\">hello Everyone</Link>\n        <Route exact path=\"/login\" component={SignIn} />\n      </BrowserRouter>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}